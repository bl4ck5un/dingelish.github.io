initSidebarItems({"fn":[["rsgx_cpuid",""],["rsgx_cpuidex",""]],"macro":[["__cfg_if_apply",""],["__cfg_if_items",""],["__thread_local_inner",""],["assert","Ensure that a boolean expression is `true` at runtime."],["assert_eq","Asserts that two expressions are equal to each other (using [`PartialEq`])."],["assert_ne","Asserts that two expressions are not equal to each other (using [`PartialEq`])."],["cfg_if",""],["debug_assert","Ensure that a boolean expression is `true` at runtime."],["debug_assert_eq","Asserts that two expressions are equal to each other."],["debug_assert_ne","Asserts that two expressions are not equal to each other."],["eprint","Macro for printing to the standard error."],["eprintln","Macro for printing to the standard error, with a newline."],["format","Creates a `String` using interpolation of runtime expressions."],["global_ctors_object","global_ctors_object is the base macro of implementing constructors."],["panic","The entry point for panic of Rust threads."],["print","Macro for printing to the standard output."],["println","Macro for printing to the standard output, with a newline. On all platforms, the newline is the LINE FEED character (`\\n`/`U+000A`) alone (no additional CARRIAGE RETURN (`\\r`/`U+000D`)."],["thread_local","Declare a new thread local storage key of type [`sgx_trts::LocalKey`]."],["try","Helper macro for reducing boilerplate code for matching `Result` together with converting downstream errors."],["unimplemented","A standardized placeholder for marking unfinished code."],["unreachable","A utility macro for indicating unreachable code."],["vec","Creates a [`Vec`] containing the arguments."],["write","Write formatted data into a buffer"],["writeln","Write formatted data into a buffer, with a newline appended."]],"mod":[["__rand",""],["any","This module implements the `Any` trait, which enables dynamic typing of any `'static` type through runtime reflection."],["ascii",""],["backtrace",""],["borrow","A module for working with borrowed data."],["boxed","A pointer type for heap allocation."],["cell","Shareable mutable containers."],["char","A character type."],["clone","The `Clone` trait for types that cannot be 'implicitly copied'."],["cmp","Functionality for ordering and comparison."],["collections",""],["convert","Traits for conversions between types."],["default","The `Default` trait for types which may have meaningful default values."],["enclave",""],["env",""],["error",""],["f32",""],["f64",""],["ffi",""],["fmt","Utilities for formatting and printing `String`s"],["fs","Filesystem manipulation operations."],["hash","Generic hashing support."],["heap",""],["i128","The 128-bit signed integer type."],["i16","The 16-bit signed integer type."],["i32","The 32-bit signed integer type."],["i64","The 64-bit signed integer type."],["i8","The 8-bit signed integer type."],["intrinsics","rustc compiler intrinsics."],["io",""],["isize","The pointer-sized signed integer type."],["iter","Composable external iteration."],["marker","Primitive traits and types representing basic properties of types."],["mem","Basic functions for dealing with memory."],["num","Additional functionality for numerics."],["ops","Overloadable operators."],["option","Optional values."],["os",""],["panic","Panic support in the standard library"],["path","Cross-platform path manipulation."],["prelude",""],["ptr","Raw, unsafe pointers, `*const T`, and `*mut T`."],["raw","Contains struct definitions for the layout of compiler built-in types."],["rc","Single-threaded reference-counting pointers. 'Rc' stands for 'Reference Counted'."],["result","Error handling with the `Result` type."],["rt","Runtime services"],["slice","A dynamically-sized view into a contiguous sequence, `[T]`."],["str","Unicode string slices."],["string","A UTF-8 encoded, growable string."],["sync",""],["thread","Native threads."],["u128","The 128-bit unsigned integer type."],["u16","The 16-bit unsigned integer type."],["u32","The 32-bit unsigned integer type."],["u64","The 64-bit unsigned integer type."],["u8","The 8-bit unsigned integer type."],["usize","The pointer-sized unsigned integer type."],["vec","A contiguous growable array type with heap-allocated contents, written `Vec<T>`."]]});